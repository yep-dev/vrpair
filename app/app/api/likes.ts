/**
 * Generated by orval v6.6.1 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 0.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "react-query"

import { useAuthenticated } from "../apiClient/useMutator"
import type {
  PaginatedRatedProfileDeepList,
  LikedListParams,
  LikesList,
  PairList,
  RateProfile,
} from "./index.schemas"

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any

export const useLikedListHook = () => {
  const likedListMutator = useAuthenticated<PaginatedRatedProfileDeepList>()

  return (params?: LikedListParams) => {
    return likedListMutator({ url: `/likes/liked-list`, method: "get", params })
  }
}

export const getLikedListQueryKey = (params?: LikedListParams) => [
  `/likes/liked-list`,
  ...(params ? [params] : []),
]

export const useLikedList = <
  TData = AsyncReturnType<ReturnType<typeof useLikedListHook>>,
  TError = unknown,
>(
  params?: LikedListParams,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useLikedListHook>>, TError, TData>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {}

  const queryKey = queryOptions?.queryKey ?? getLikedListQueryKey(params)

  const likedList = useLikedListHook()

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useLikedListHook>>> = () =>
    likedList(params)

  const query = useQuery<AsyncReturnType<ReturnType<typeof useLikedListHook>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  )

  return {
    queryKey,
    ...query,
  }
}

export const useLikesListHook = () => {
  const likesListMutator = useAuthenticated<LikesList>()

  return () => {
    return likesListMutator({ url: `/likes/likes-list`, method: "get" })
  }
}

export const getLikesListQueryKey = () => [`/likes/likes-list`]

export const useLikesList = <
  TData = AsyncReturnType<ReturnType<typeof useLikesListHook>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useLikesListHook>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {}

  const queryKey = queryOptions?.queryKey ?? getLikesListQueryKey()

  const likesList = useLikesListHook()

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useLikesListHook>>> = () =>
    likesList()

  const query = useQuery<AsyncReturnType<ReturnType<typeof useLikesListHook>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  )

  return {
    queryKey,
    ...query,
  }
}

export const usePairListHook = () => {
  const pairListMutator = useAuthenticated<PairList>()

  return () => {
    return pairListMutator({ url: `/likes/pair-list`, method: "get" })
  }
}

export const getPairListQueryKey = () => [`/likes/pair-list`]

export const usePairList = <
  TData = AsyncReturnType<ReturnType<typeof usePairListHook>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof usePairListHook>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {}

  const queryKey = queryOptions?.queryKey ?? getPairListQueryKey()

  const pairList = usePairListHook()

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof usePairListHook>>> = () =>
    pairList()

  const query = useQuery<AsyncReturnType<ReturnType<typeof usePairListHook>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  )

  return {
    queryKey,
    ...query,
  }
}

export const useRateProfileHook = () => {
  const rateProfileMutator = useAuthenticated<RateProfile>()

  return (rateProfile: RateProfile) => {
    return rateProfileMutator({ url: `/likes/rate-profile`, method: "post", data: rateProfile })
  }
}

export const useRateProfile = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof useRateProfileHook>>,
    TError,
    { data: RateProfile },
    TContext
  >
}) => {
  const { mutation: mutationOptions } = options || {}

  const rateProfile = useRateProfileHook()

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof useRateProfileHook>>,
    { data: RateProfile }
  > = (props) => {
    const { data } = props || {}

    return rateProfile(data)
  }

  return useMutation<AsyncReturnType<typeof rateProfile>, TError, { data: RateProfile }, TContext>(
    mutationFn,
    mutationOptions,
  )
}
