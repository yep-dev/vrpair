/**
 * Generated by orval v6.6.1 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 0.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "react-query"

import { useAuthenticated, useStaff } from "../apiClient/useMutator"
import type { User, TokenRefresh, ForceTokenParams } from "./index.schemas"

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any

export const useCurrentUserHook = () => {
  const currentUserMutator = useAuthenticated<User>()

  return () => {
    return currentUserMutator({ url: `/users/current-user`, method: "get" })
  }
}

export const getCurrentUserQueryKey = () => [`/users/current-user`]

export const useCurrentUser = <
  TData = AsyncReturnType<ReturnType<typeof useCurrentUserHook>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useCurrentUserHook>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {}

  const queryKey = queryOptions?.queryKey ?? getCurrentUserQueryKey()

  const currentUser = useCurrentUserHook()

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useCurrentUserHook>>> = () =>
    currentUser()

  const query = useQuery<AsyncReturnType<ReturnType<typeof useCurrentUserHook>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  )

  return {
    queryKey,
    ...query,
  }
}

export const useForceTokenHook = () => {
  const forceTokenMutator = useStaff<TokenRefresh>()

  return (params?: ForceTokenParams) => {
    return forceTokenMutator({ url: `/users/force-token`, method: "get", params })
  }
}

export const getForceTokenQueryKey = (params?: ForceTokenParams) => [
  `/users/force-token`,
  ...(params ? [params] : []),
]

export const useForceToken = <
  TData = AsyncReturnType<ReturnType<typeof useForceTokenHook>>,
  TError = unknown,
>(
  params?: ForceTokenParams,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useForceTokenHook>>, TError, TData>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {}

  const queryKey = queryOptions?.queryKey ?? getForceTokenQueryKey(params)

  const forceToken = useForceTokenHook()

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useForceTokenHook>>> = () =>
    forceToken(params)

  const query = useQuery<AsyncReturnType<ReturnType<typeof useForceTokenHook>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  )

  return {
    queryKey,
    ...query,
  }
}

/**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 */
export const useRefreshTokenHook = () => {
  const refreshTokenMutator = useAuthenticated<TokenRefresh>()

  return (tokenRefresh: TokenRefresh) => {
    return refreshTokenMutator({ url: `/users/refresh-token`, method: "post", data: tokenRefresh })
  }
}

export const useRefreshToken = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof useRefreshTokenHook>>,
    TError,
    { data: TokenRefresh },
    TContext
  >
}) => {
  const { mutation: mutationOptions } = options || {}

  const refreshToken = useRefreshTokenHook()

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof useRefreshTokenHook>>,
    { data: TokenRefresh }
  > = (props) => {
    const { data } = props || {}

    return refreshToken(data)
  }

  return useMutation<
    AsyncReturnType<typeof refreshToken>,
    TError,
    { data: TokenRefresh },
    TContext
  >(mutationFn, mutationOptions)
}
