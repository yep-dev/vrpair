/**
 * Generated by orval v6.6.1 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 0.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "react-query"

import { useAuthenticated } from "../apiClient/useMutator"
import type {
  CurrentProfile,
  CreateProfileForm,
  PreferencesForm,
  ProfileForm,
  ProfileDetails,
  PaginatedProfileFeedList,
  ProfileFeedParams,
  PaginatedProfileList,
  ProfileListParams,
} from "./index.schemas"

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any

export const useCreateProfileHook = () => {
  const createProfileMutator = useAuthenticated<CurrentProfile>()

  return (createProfileForm: CreateProfileForm) => {
    return createProfileMutator({
      url: `/profiles/create-profile`,
      method: "post",
      data: createProfileForm,
    })
  }
}

export const useCreateProfile = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof useCreateProfileHook>>,
    TError,
    { data: CreateProfileForm },
    TContext
  >
}) => {
  const { mutation: mutationOptions } = options || {}

  const createProfile = useCreateProfileHook()

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof useCreateProfileHook>>,
    { data: CreateProfileForm }
  > = (props) => {
    const { data } = props || {}

    return createProfile(data)
  }

  return useMutation<
    AsyncReturnType<typeof createProfile>,
    TError,
    { data: CreateProfileForm },
    TContext
  >(mutationFn, mutationOptions)
}
export const useCurrentProfileHook = () => {
  const currentProfileMutator = useAuthenticated<CurrentProfile>()

  return () => {
    return currentProfileMutator({ url: `/profiles/current-profile`, method: "get" })
  }
}

export const getCurrentProfileQueryKey = () => [`/profiles/current-profile`]

export const useCurrentProfile = <
  TData = AsyncReturnType<ReturnType<typeof useCurrentProfileHook>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useCurrentProfileHook>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {}

  const queryKey = queryOptions?.queryKey ?? getCurrentProfileQueryKey()

  const currentProfile = useCurrentProfileHook()

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useCurrentProfileHook>>> = () =>
    currentProfile()

  const query = useQuery<AsyncReturnType<ReturnType<typeof useCurrentProfileHook>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  )

  return {
    queryKey,
    ...query,
  }
}

export const useEditPreferencesHook = () => {
  const editPreferencesMutator = useAuthenticated<CurrentProfile>()

  return (preferencesForm: PreferencesForm) => {
    return editPreferencesMutator({
      url: `/profiles/edit-preferences`,
      method: "post",
      data: preferencesForm,
    })
  }
}

export const useEditPreferences = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof useEditPreferencesHook>>,
    TError,
    { data: PreferencesForm },
    TContext
  >
}) => {
  const { mutation: mutationOptions } = options || {}

  const editPreferences = useEditPreferencesHook()

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof useEditPreferencesHook>>,
    { data: PreferencesForm }
  > = (props) => {
    const { data } = props || {}

    return editPreferences(data)
  }

  return useMutation<
    AsyncReturnType<typeof editPreferences>,
    TError,
    { data: PreferencesForm },
    TContext
  >(mutationFn, mutationOptions)
}
export const useEditProfileHook = () => {
  const editProfileMutator = useAuthenticated<CurrentProfile>()

  return (profileForm: ProfileForm) => {
    return editProfileMutator({ url: `/profiles/edit-profile`, method: "post", data: profileForm })
  }
}

export const useEditProfile = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof useEditProfileHook>>,
    TError,
    { data: ProfileForm },
    TContext
  >
}) => {
  const { mutation: mutationOptions } = options || {}

  const editProfile = useEditProfileHook()

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof useEditProfileHook>>,
    { data: ProfileForm }
  > = (props) => {
    const { data } = props || {}

    return editProfile(data)
  }

  return useMutation<AsyncReturnType<typeof editProfile>, TError, { data: ProfileForm }, TContext>(
    mutationFn,
    mutationOptions,
  )
}
export const useProfileDetailsHook = () => {
  const profileDetailsMutator = useAuthenticated<ProfileDetails>()

  return (id: number) => {
    return profileDetailsMutator({ url: `/profiles/profile-details/${id}`, method: "get" })
  }
}

export const getProfileDetailsQueryKey = (id: number) => [`/profiles/profile-details/${id}`]

export const useProfileDetails = <
  TData = AsyncReturnType<ReturnType<typeof useProfileDetailsHook>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<ReturnType<typeof useProfileDetailsHook>>,
      TError,
      TData
    >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {}

  const queryKey = queryOptions?.queryKey ?? getProfileDetailsQueryKey(id)

  const profileDetails = useProfileDetailsHook()

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useProfileDetailsHook>>> = () =>
    profileDetails(id)

  const query = useQuery<AsyncReturnType<ReturnType<typeof useProfileDetailsHook>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  )

  return {
    queryKey,
    ...query,
  }
}

export const useProfileFeedHook = () => {
  const profileFeedMutator = useAuthenticated<PaginatedProfileFeedList>()

  return (params?: ProfileFeedParams) => {
    return profileFeedMutator({ url: `/profiles/profile-feed`, method: "get", params })
  }
}

export const getProfileFeedQueryKey = (params?: ProfileFeedParams) => [
  `/profiles/profile-feed`,
  ...(params ? [params] : []),
]

export const useProfileFeed = <
  TData = AsyncReturnType<ReturnType<typeof useProfileFeedHook>>,
  TError = unknown,
>(
  params?: ProfileFeedParams,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useProfileFeedHook>>, TError, TData>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {}

  const queryKey = queryOptions?.queryKey ?? getProfileFeedQueryKey(params)

  const profileFeed = useProfileFeedHook()

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useProfileFeedHook>>> = () =>
    profileFeed(params)

  const query = useQuery<AsyncReturnType<ReturnType<typeof useProfileFeedHook>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  )

  return {
    queryKey,
    ...query,
  }
}

export const useProfileListHook = () => {
  const profileListMutator = useAuthenticated<PaginatedProfileList>()

  return (params?: ProfileListParams) => {
    return profileListMutator({ url: `/profiles/profile-list`, method: "get", params })
  }
}

export const getProfileListQueryKey = (params?: ProfileListParams) => [
  `/profiles/profile-list`,
  ...(params ? [params] : []),
]

export const useProfileList = <
  TData = AsyncReturnType<ReturnType<typeof useProfileListHook>>,
  TError = unknown,
>(
  params?: ProfileListParams,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useProfileListHook>>, TError, TData>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {}

  const queryKey = queryOptions?.queryKey ?? getProfileListQueryKey(params)

  const profileList = useProfileListHook()

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useProfileListHook>>> = () =>
    profileList(params)

  const query = useQuery<AsyncReturnType<ReturnType<typeof useProfileListHook>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  )

  return {
    queryKey,
    ...query,
  }
}
