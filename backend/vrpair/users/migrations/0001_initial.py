# Generated by Django 3.1.13 on 2021-12-05 02:04

import django.core.management.utils
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "secret_key",
                    models.CharField(
                        default=django.core.management.utils.get_random_secret_key,
                        max_length=255,
                    ),
                ),
                ("is_staff", models.BooleanField(default=False)),
                ("password", models.CharField(max_length=128, null=True)),
                ("last_login", models.DateTimeField(default=django.utils.timezone.now)),
                ("discord_id", models.CharField(max_length=32, unique=True)),
                ("discord_username", models.CharField(max_length=32)),
                ("discord_discriminator", models.CharField(max_length=4)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
